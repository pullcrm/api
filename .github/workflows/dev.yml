# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ devel ]
  pull_request:
    branches: [ devel ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      #JWT AUTH
      SECRET_FOR_JWT: '{{ secrets.SECRET_FOR_JWT_DEV }}'
      SECRET_REFRESH_FOR_JWT: '{{ secrets.SECRET_REFRESH_FOR_JWT_DEV }}'

      #DB
      DB_DIALECT: '{{ secrets.DB_DIALECT_DEV }}'
      DB_HOST: '{{ secrets.DB_HOST_DEV }}'
      DB_PORT: '{{ secrets.DB_PORT_DEV }}'
      DB_NAME: '{{ secrets.DB_NAME_DEV }}'
      DB_USER: '{{ secrets.DB_USER_DEV }}'
      DB_PASSWORD: '{{ secrets.DB_PASSWORD_DEV }}'

      #PORT
      PORT: '{{ secrets.PORT_DEV }}'

      #SERVER
      HOST: '{{ secrets.HOST_DEV }}'

      #SMS CLIENT
      SMS_COMPANY_NAME: '{{ secrets.SMS_COMPANY_NAME_DEV }}'
      SMS_PUBLIC_KEY: '{{ secrets.SMS_PUBLIC_KEY_DEV }}'
      SMS_PRIVATE_KEY: '{{ secrets.SMS_PRIVATE_KEY_DEV }}'
      SMS_CLIENT_SEND_REAL_SMS: '{{ secrets.SMS_CLIENT_SEND_REAL_SMS_DEV }}'

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    
#     - name: Create SSH key
#       uses: shimataro/ssh-key-action@v2
#       with:
#         key: ${{ secrets.SSH_PRIVATE_KEY }}
#         name: id_rsa # optional
#         known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }} 
          
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Yarn CLI
      uses: CultureHQ/actions-yarn@v1.0.1
      
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache yarn cache
      uses: actions/cache@v2
      id: cache-yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Cache node_modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-
    - run: yarn install
      if: |
        steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
        steps.cache-node-modules.outputs.cache-hit != 'true'
        
    - name: Build the project
      run: yarn build
      
    - name: Create the release folder on the server
      run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir /var/www/pullcrm.dev/backend/release-${{ github.sha }}'

    - name: Upload the dist folder to the server
      run: rsync -r ./dist ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:'/var/www/pullcrm.dev/backend/release-${{ github.sha }}'

#     - name: Link the release folder on the server
#       run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'rm /var/www/pullcrm.dev/backend/release && ln -s /var/www/pullcrm.dev/backend/release-${{ github.sha }} /var/www/pullcrm.dev/backend/release'
